/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace GreenProof {
  export type ActionStruct = {
    timestamp: BigNumberish;
    category: string;
    description: string;
    value: BytesLike;
  };

  export type ActionStructOutput = [
    timestamp: bigint,
    category: string,
    description: string,
    value: string
  ] & {
    timestamp: bigint;
    category: string;
    description: string;
    value: string;
  };
}

export interface GreenProofInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BADGE_LV1_COUNT"
      | "BADGE_LV2_COUNT"
      | "badge"
      | "cappedAccumulate"
      | "getTopUsers"
      | "getTotalActions"
      | "getUserActions"
      | "getUserEncryptedCount"
      | "getUserEncryptedSum"
      | "grantAccess"
      | "grantTransientAccess"
      | "isCountAtLeast"
      | "mintBadge"
      | "protocolId"
      | "recordAction"
      | "userActionCount"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ActionRecorded" | "BadgeMinted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BADGE_LV1_COUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BADGE_LV2_COUNT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "badge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cappedAccumulate",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTopUsers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalActions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserActions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserEncryptedCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserEncryptedSum",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantAccess",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantTransientAccess",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isCountAtLeast",
    values: [AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintBadge",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recordAction",
    values: [string, string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userActionCount",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "BADGE_LV1_COUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BADGE_LV2_COUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "badge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cappedAccumulate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTopUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalActions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserActions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserEncryptedCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserEncryptedSum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantTransientAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCountAtLeast",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintBadge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recordAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userActionCount",
    data: BytesLike
  ): Result;
}

export namespace ActionRecordedEvent {
  export type InputTuple = [
    user: AddressLike,
    category: string,
    value: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    category: string,
    value: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    user: string;
    category: string;
    value: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BadgeMintedEvent {
  export type InputTuple = [user: AddressLike, level: BigNumberish];
  export type OutputTuple = [user: string, level: bigint];
  export interface OutputObject {
    user: string;
    level: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GreenProof extends BaseContract {
  connect(runner?: ContractRunner | null): GreenProof;
  waitForDeployment(): Promise<this>;

  interface: GreenProofInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BADGE_LV1_COUNT: TypedContractMethod<[], [bigint], "view">;

  BADGE_LV2_COUNT: TypedContractMethod<[], [bigint], "view">;

  badge: TypedContractMethod<[], [string], "view">;

  cappedAccumulate: TypedContractMethod<
    [inc: BigNumberish, capPlain: BigNumberish],
    [void],
    "nonpayable"
  >;

  getTopUsers: TypedContractMethod<[limit: BigNumberish], [string[]], "view">;

  getTotalActions: TypedContractMethod<[], [bigint], "view">;

  getUserActions: TypedContractMethod<
    [user: AddressLike],
    [GreenProof.ActionStructOutput[]],
    "view"
  >;

  getUserEncryptedCount: TypedContractMethod<
    [user: AddressLike],
    [string],
    "view"
  >;

  getUserEncryptedSum: TypedContractMethod<
    [user: AddressLike],
    [string],
    "view"
  >;

  grantAccess: TypedContractMethod<[to: AddressLike], [void], "nonpayable">;

  grantTransientAccess: TypedContractMethod<
    [to: AddressLike],
    [void],
    "nonpayable"
  >;

  isCountAtLeast: TypedContractMethod<
    [user: AddressLike, threshold: BytesLike, proof: BytesLike],
    [string],
    "nonpayable"
  >;

  mintBadge: TypedContractMethod<[level: BigNumberish], [void], "nonpayable">;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  recordAction: TypedContractMethod<
    [
      category: string,
      description: string,
      inputValue32: BytesLike,
      inputProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  userActionCount: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BADGE_LV1_COUNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BADGE_LV2_COUNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "badge"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "cappedAccumulate"
  ): TypedContractMethod<
    [inc: BigNumberish, capPlain: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getTopUsers"
  ): TypedContractMethod<[limit: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getTotalActions"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserActions"
  ): TypedContractMethod<
    [user: AddressLike],
    [GreenProof.ActionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserEncryptedCount"
  ): TypedContractMethod<[user: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getUserEncryptedSum"
  ): TypedContractMethod<[user: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantAccess"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "grantTransientAccess"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isCountAtLeast"
  ): TypedContractMethod<
    [user: AddressLike, threshold: BytesLike, proof: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintBadge"
  ): TypedContractMethod<[level: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "recordAction"
  ): TypedContractMethod<
    [
      category: string,
      description: string,
      inputValue32: BytesLike,
      inputProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userActionCount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getEvent(
    key: "ActionRecorded"
  ): TypedContractEvent<
    ActionRecordedEvent.InputTuple,
    ActionRecordedEvent.OutputTuple,
    ActionRecordedEvent.OutputObject
  >;
  getEvent(
    key: "BadgeMinted"
  ): TypedContractEvent<
    BadgeMintedEvent.InputTuple,
    BadgeMintedEvent.OutputTuple,
    BadgeMintedEvent.OutputObject
  >;

  filters: {
    "ActionRecorded(address,string,uint256,uint256)": TypedContractEvent<
      ActionRecordedEvent.InputTuple,
      ActionRecordedEvent.OutputTuple,
      ActionRecordedEvent.OutputObject
    >;
    ActionRecorded: TypedContractEvent<
      ActionRecordedEvent.InputTuple,
      ActionRecordedEvent.OutputTuple,
      ActionRecordedEvent.OutputObject
    >;

    "BadgeMinted(address,uint8)": TypedContractEvent<
      BadgeMintedEvent.InputTuple,
      BadgeMintedEvent.OutputTuple,
      BadgeMintedEvent.OutputObject
    >;
    BadgeMinted: TypedContractEvent<
      BadgeMintedEvent.InputTuple,
      BadgeMintedEvent.OutputTuple,
      BadgeMintedEvent.OutputObject
    >;
  };
}
